"""autogenerated by genpy from prx_simulation/graph_msg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class graph_msg(genpy.Message):
  _md5sum = "41d3c9e903eaba24a718b1d5cbda5332"
  _type = "prx_simulation/graph_msg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string sender_name
string graph_name
string graph
float64 start_time
float64 start_msg_time
float64 deserialize_time
float64 start_send_time


"""
  __slots__ = ['sender_name','graph_name','graph','start_time','start_msg_time','deserialize_time','start_send_time']
  _slot_types = ['string','string','string','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sender_name,graph_name,graph,start_time,start_msg_time,deserialize_time,start_send_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(graph_msg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sender_name is None:
        self.sender_name = ''
      if self.graph_name is None:
        self.graph_name = ''
      if self.graph is None:
        self.graph = ''
      if self.start_time is None:
        self.start_time = 0.
      if self.start_msg_time is None:
        self.start_msg_time = 0.
      if self.deserialize_time is None:
        self.deserialize_time = 0.
      if self.start_send_time is None:
        self.start_send_time = 0.
    else:
      self.sender_name = ''
      self.graph_name = ''
      self.graph = ''
      self.start_time = 0.
      self.start_msg_time = 0.
      self.deserialize_time = 0.
      self.start_send_time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.sender_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.graph_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.graph
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4d.pack(_x.start_time, _x.start_msg_time, _x.deserialize_time, _x.start_send_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sender_name = str[start:end].decode('utf-8')
      else:
        self.sender_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.graph_name = str[start:end].decode('utf-8')
      else:
        self.graph_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.graph = str[start:end].decode('utf-8')
      else:
        self.graph = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.start_time, _x.start_msg_time, _x.deserialize_time, _x.start_send_time,) = _struct_4d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.sender_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.graph_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.graph
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4d.pack(_x.start_time, _x.start_msg_time, _x.deserialize_time, _x.start_send_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sender_name = str[start:end].decode('utf-8')
      else:
        self.sender_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.graph_name = str[start:end].decode('utf-8')
      else:
        self.graph_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.graph = str[start:end].decode('utf-8')
      else:
        self.graph = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.start_time, _x.start_msg_time, _x.deserialize_time, _x.start_send_time,) = _struct_4d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4d = struct.Struct("<4d")
