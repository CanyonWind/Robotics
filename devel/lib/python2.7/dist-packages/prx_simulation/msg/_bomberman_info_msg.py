"""autogenerated by genpy from prx_simulation/bomberman_info_msg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class bomberman_info_msg(genpy.Message):
  _md5sum = "b790097f9f5658711ee7be4fcef0fc52"
  _type = "prx_simulation/bomberman_info_msg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string node_name
string consumer
float64 goal_radius
float64 bomb_radius
float64 bomb_frequency
float64[] my_bomb_state
geometry_msgs/Point[] opp_bomb_state
float64[] my_goal
geometry_msgs/Point[] opp_goal
float64[] my_position
geometry_msgs/Point[] opp_position
float64[] my_respawn
geometry_msgs/Point[] opp_respawn
float64 timestamp
bool exploded
bool new_contingency_used
float64 contingency_length
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['node_name','consumer','goal_radius','bomb_radius','bomb_frequency','my_bomb_state','opp_bomb_state','my_goal','opp_goal','my_position','opp_position','my_respawn','opp_respawn','timestamp','exploded','new_contingency_used','contingency_length']
  _slot_types = ['string','string','float64','float64','float64','float64[]','geometry_msgs/Point[]','float64[]','geometry_msgs/Point[]','float64[]','geometry_msgs/Point[]','float64[]','geometry_msgs/Point[]','float64','bool','bool','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       node_name,consumer,goal_radius,bomb_radius,bomb_frequency,my_bomb_state,opp_bomb_state,my_goal,opp_goal,my_position,opp_position,my_respawn,opp_respawn,timestamp,exploded,new_contingency_used,contingency_length

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(bomberman_info_msg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.node_name is None:
        self.node_name = ''
      if self.consumer is None:
        self.consumer = ''
      if self.goal_radius is None:
        self.goal_radius = 0.
      if self.bomb_radius is None:
        self.bomb_radius = 0.
      if self.bomb_frequency is None:
        self.bomb_frequency = 0.
      if self.my_bomb_state is None:
        self.my_bomb_state = []
      if self.opp_bomb_state is None:
        self.opp_bomb_state = []
      if self.my_goal is None:
        self.my_goal = []
      if self.opp_goal is None:
        self.opp_goal = []
      if self.my_position is None:
        self.my_position = []
      if self.opp_position is None:
        self.opp_position = []
      if self.my_respawn is None:
        self.my_respawn = []
      if self.opp_respawn is None:
        self.opp_respawn = []
      if self.timestamp is None:
        self.timestamp = 0.
      if self.exploded is None:
        self.exploded = False
      if self.new_contingency_used is None:
        self.new_contingency_used = False
      if self.contingency_length is None:
        self.contingency_length = 0.
    else:
      self.node_name = ''
      self.consumer = ''
      self.goal_radius = 0.
      self.bomb_radius = 0.
      self.bomb_frequency = 0.
      self.my_bomb_state = []
      self.opp_bomb_state = []
      self.my_goal = []
      self.opp_goal = []
      self.my_position = []
      self.opp_position = []
      self.my_respawn = []
      self.opp_respawn = []
      self.timestamp = 0.
      self.exploded = False
      self.new_contingency_used = False
      self.contingency_length = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.node_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.consumer
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.goal_radius, _x.bomb_radius, _x.bomb_frequency))
      length = len(self.my_bomb_state)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.my_bomb_state))
      length = len(self.opp_bomb_state)
      buff.write(_struct_I.pack(length))
      for val1 in self.opp_bomb_state:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.my_goal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.my_goal))
      length = len(self.opp_goal)
      buff.write(_struct_I.pack(length))
      for val1 in self.opp_goal:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.my_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.my_position))
      length = len(self.opp_position)
      buff.write(_struct_I.pack(length))
      for val1 in self.opp_position:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.my_respawn)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.my_respawn))
      length = len(self.opp_respawn)
      buff.write(_struct_I.pack(length))
      for val1 in self.opp_respawn:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_d2Bd.pack(_x.timestamp, _x.exploded, _x.new_contingency_used, _x.contingency_length))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.opp_bomb_state is None:
        self.opp_bomb_state = None
      if self.opp_goal is None:
        self.opp_goal = None
      if self.opp_position is None:
        self.opp_position = None
      if self.opp_respawn is None:
        self.opp_respawn = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_name = str[start:end].decode('utf-8')
      else:
        self.node_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.consumer = str[start:end].decode('utf-8')
      else:
        self.consumer = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.goal_radius, _x.bomb_radius, _x.bomb_frequency,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.my_bomb_state = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.opp_bomb_state = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.opp_bomb_state.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.my_goal = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.opp_goal = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.opp_goal.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.my_position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.opp_position = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.opp_position.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.my_respawn = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.opp_respawn = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.opp_respawn.append(val1)
      _x = self
      start = end
      end += 18
      (_x.timestamp, _x.exploded, _x.new_contingency_used, _x.contingency_length,) = _struct_d2Bd.unpack(str[start:end])
      self.exploded = bool(self.exploded)
      self.new_contingency_used = bool(self.new_contingency_used)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.node_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.consumer
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.goal_radius, _x.bomb_radius, _x.bomb_frequency))
      length = len(self.my_bomb_state)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.my_bomb_state.tostring())
      length = len(self.opp_bomb_state)
      buff.write(_struct_I.pack(length))
      for val1 in self.opp_bomb_state:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.my_goal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.my_goal.tostring())
      length = len(self.opp_goal)
      buff.write(_struct_I.pack(length))
      for val1 in self.opp_goal:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.my_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.my_position.tostring())
      length = len(self.opp_position)
      buff.write(_struct_I.pack(length))
      for val1 in self.opp_position:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.my_respawn)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.my_respawn.tostring())
      length = len(self.opp_respawn)
      buff.write(_struct_I.pack(length))
      for val1 in self.opp_respawn:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_d2Bd.pack(_x.timestamp, _x.exploded, _x.new_contingency_used, _x.contingency_length))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.opp_bomb_state is None:
        self.opp_bomb_state = None
      if self.opp_goal is None:
        self.opp_goal = None
      if self.opp_position is None:
        self.opp_position = None
      if self.opp_respawn is None:
        self.opp_respawn = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_name = str[start:end].decode('utf-8')
      else:
        self.node_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.consumer = str[start:end].decode('utf-8')
      else:
        self.consumer = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.goal_radius, _x.bomb_radius, _x.bomb_frequency,) = _struct_3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.my_bomb_state = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.opp_bomb_state = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.opp_bomb_state.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.my_goal = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.opp_goal = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.opp_goal.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.my_position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.opp_position = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.opp_position.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.my_respawn = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.opp_respawn = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.opp_respawn.append(val1)
      _x = self
      start = end
      end += 18
      (_x.timestamp, _x.exploded, _x.new_contingency_used, _x.contingency_length,) = _struct_d2Bd.unpack(str[start:end])
      self.exploded = bool(self.exploded)
      self.new_contingency_used = bool(self.new_contingency_used)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d2Bd = struct.Struct("<d2Bd")
_struct_3d = struct.Struct("<3d")
