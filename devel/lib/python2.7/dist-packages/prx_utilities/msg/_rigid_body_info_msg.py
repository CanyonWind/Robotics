"""autogenerated by genpy from prx_utilities/rigid_body_info_msg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class rigid_body_info_msg(genpy.Message):
  _md5sum = "8d3e185885c45ca9d656997df5a70642"
  _type = "prx_utilities/rigid_body_info_msg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 SPHERE=1
uint8 BOX=2
uint8 CONE=3
uint8 CYLINDER=4
uint8 OPEN_CYLINDER=5
uint8 CAPSULE=6
uint8 TRIANGLE=7
uint8 QUAD=8
uint8 LINES=9
uint8 LINESTRIP=10
uint8 MESH=11

string system_name
string rigid_body_name
string material_name
uint8 geometry_type
float64[] geometry_params
float64[] color_rgba

"""
  # Pseudo-constants
  SPHERE = 1
  BOX = 2
  CONE = 3
  CYLINDER = 4
  OPEN_CYLINDER = 5
  CAPSULE = 6
  TRIANGLE = 7
  QUAD = 8
  LINES = 9
  LINESTRIP = 10
  MESH = 11

  __slots__ = ['system_name','rigid_body_name','material_name','geometry_type','geometry_params','color_rgba']
  _slot_types = ['string','string','string','uint8','float64[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       system_name,rigid_body_name,material_name,geometry_type,geometry_params,color_rgba

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(rigid_body_info_msg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.system_name is None:
        self.system_name = ''
      if self.rigid_body_name is None:
        self.rigid_body_name = ''
      if self.material_name is None:
        self.material_name = ''
      if self.geometry_type is None:
        self.geometry_type = 0
      if self.geometry_params is None:
        self.geometry_params = []
      if self.color_rgba is None:
        self.color_rgba = []
    else:
      self.system_name = ''
      self.rigid_body_name = ''
      self.material_name = ''
      self.geometry_type = 0
      self.geometry_params = []
      self.color_rgba = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.system_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rigid_body_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.material_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.geometry_type))
      length = len(self.geometry_params)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.geometry_params))
      length = len(self.color_rgba)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.color_rgba))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.system_name = str[start:end].decode('utf-8')
      else:
        self.system_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rigid_body_name = str[start:end].decode('utf-8')
      else:
        self.rigid_body_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.material_name = str[start:end].decode('utf-8')
      else:
        self.material_name = str[start:end]
      start = end
      end += 1
      (self.geometry_type,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.geometry_params = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.color_rgba = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.system_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rigid_body_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.material_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.geometry_type))
      length = len(self.geometry_params)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.geometry_params.tostring())
      length = len(self.color_rgba)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.color_rgba.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.system_name = str[start:end].decode('utf-8')
      else:
        self.system_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rigid_body_name = str[start:end].decode('utf-8')
      else:
        self.rigid_body_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.material_name = str[start:end].decode('utf-8')
      else:
        self.material_name = str[start:end]
      start = end
      end += 1
      (self.geometry_type,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.geometry_params = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.color_rgba = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
