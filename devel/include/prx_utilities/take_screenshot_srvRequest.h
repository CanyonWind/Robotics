// Generated by gencpp from file prx_utilities/take_screenshot_srvRequest.msg
// DO NOT EDIT!


#ifndef PRX_UTILITIES_MESSAGE_TAKE_SCREENSHOT_SRVREQUEST_H
#define PRX_UTILITIES_MESSAGE_TAKE_SCREENSHOT_SRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace prx_utilities
{
template <class ContainerAllocator>
struct take_screenshot_srvRequest_
{
  typedef take_screenshot_srvRequest_<ContainerAllocator> Type;

  take_screenshot_srvRequest_()
    : destination_node()
    , screen_num(0)
    , number_of_screenshots(0)  {
    }
  take_screenshot_srvRequest_(const ContainerAllocator& _alloc)
    : destination_node(_alloc)
    , screen_num(0)
    , number_of_screenshots(0)  {
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _destination_node_type;
  _destination_node_type destination_node;

   typedef int32_t _screen_num_type;
  _screen_num_type screen_num;

   typedef int32_t _number_of_screenshots_type;
  _number_of_screenshots_type number_of_screenshots;




  typedef boost::shared_ptr< ::prx_utilities::take_screenshot_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prx_utilities::take_screenshot_srvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct take_screenshot_srvRequest_

typedef ::prx_utilities::take_screenshot_srvRequest_<std::allocator<void> > take_screenshot_srvRequest;

typedef boost::shared_ptr< ::prx_utilities::take_screenshot_srvRequest > take_screenshot_srvRequestPtr;
typedef boost::shared_ptr< ::prx_utilities::take_screenshot_srvRequest const> take_screenshot_srvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prx_utilities::take_screenshot_srvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prx_utilities::take_screenshot_srvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace prx_utilities

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'prx_utilities': ['/home/parallels/Desktop/ROS_workspace/src/prx_utilities/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::prx_utilities::take_screenshot_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prx_utilities::take_screenshot_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prx_utilities::take_screenshot_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prx_utilities::take_screenshot_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prx_utilities::take_screenshot_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prx_utilities::take_screenshot_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prx_utilities::take_screenshot_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7549dad931fa848fc767a55b74b0961b";
  }

  static const char* value(const ::prx_utilities::take_screenshot_srvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7549dad931fa848fULL;
  static const uint64_t static_value2 = 0xc767a55b74b0961bULL;
};

template<class ContainerAllocator>
struct DataType< ::prx_utilities::take_screenshot_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prx_utilities/take_screenshot_srvRequest";
  }

  static const char* value(const ::prx_utilities::take_screenshot_srvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prx_utilities::take_screenshot_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string destination_node\n\
int32 screen_num\n\
int32 number_of_screenshots\n\
";
  }

  static const char* value(const ::prx_utilities::take_screenshot_srvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prx_utilities::take_screenshot_srvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.destination_node);
      stream.next(m.screen_num);
      stream.next(m.number_of_screenshots);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct take_screenshot_srvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prx_utilities::take_screenshot_srvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prx_utilities::take_screenshot_srvRequest_<ContainerAllocator>& v)
  {
    s << indent << "destination_node: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.destination_node);
    s << indent << "screen_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.screen_num);
    s << indent << "number_of_screenshots: ";
    Printer<int32_t>::stream(s, indent + "  ", v.number_of_screenshots);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRX_UTILITIES_MESSAGE_TAKE_SCREENSHOT_SRVREQUEST_H
