// Generated by gencpp from file prx_utilities/update_info_geoms_srvRequest.msg
// DO NOT EDIT!


#ifndef PRX_UTILITIES_MESSAGE_UPDATE_INFO_GEOMS_SRVREQUEST_H
#define PRX_UTILITIES_MESSAGE_UPDATE_INFO_GEOMS_SRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <prx_utilities/Vec4_msg.h>

namespace prx_utilities
{
template <class ContainerAllocator>
struct update_info_geoms_srvRequest_
{
  typedef update_info_geoms_srvRequest_<ContainerAllocator> Type;

  update_info_geoms_srvRequest_()
    : info_names()
    , info_configs()
    , info_colors()
    , poll_tf(false)  {
    }
  update_info_geoms_srvRequest_(const ContainerAllocator& _alloc)
    : info_names(_alloc)
    , info_configs(_alloc)
    , info_colors(_alloc)
    , poll_tf(false)  {
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _info_names_type;
  _info_names_type info_names;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _info_configs_type;
  _info_configs_type info_configs;

   typedef std::vector< ::prx_utilities::Vec4_msg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::prx_utilities::Vec4_msg_<ContainerAllocator> >::other >  _info_colors_type;
  _info_colors_type info_colors;

   typedef uint8_t _poll_tf_type;
  _poll_tf_type poll_tf;




  typedef boost::shared_ptr< ::prx_utilities::update_info_geoms_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prx_utilities::update_info_geoms_srvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct update_info_geoms_srvRequest_

typedef ::prx_utilities::update_info_geoms_srvRequest_<std::allocator<void> > update_info_geoms_srvRequest;

typedef boost::shared_ptr< ::prx_utilities::update_info_geoms_srvRequest > update_info_geoms_srvRequestPtr;
typedef boost::shared_ptr< ::prx_utilities::update_info_geoms_srvRequest const> update_info_geoms_srvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prx_utilities::update_info_geoms_srvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prx_utilities::update_info_geoms_srvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace prx_utilities

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'prx_utilities': ['/home/parallels/Desktop/ROS_workspace/src/prx_utilities/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::prx_utilities::update_info_geoms_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prx_utilities::update_info_geoms_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prx_utilities::update_info_geoms_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prx_utilities::update_info_geoms_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prx_utilities::update_info_geoms_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prx_utilities::update_info_geoms_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prx_utilities::update_info_geoms_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d9d148dce7970f17962a58c3b26ffd0c";
  }

  static const char* value(const ::prx_utilities::update_info_geoms_srvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd9d148dce7970f17ULL;
  static const uint64_t static_value2 = 0x962a58c3b26ffd0cULL;
};

template<class ContainerAllocator>
struct DataType< ::prx_utilities::update_info_geoms_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prx_utilities/update_info_geoms_srvRequest";
  }

  static const char* value(const ::prx_utilities::update_info_geoms_srvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prx_utilities::update_info_geoms_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] info_names\n\
geometry_msgs/Pose[] info_configs\n\
Vec4_msg[] info_colors\n\
bool poll_tf\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: prx_utilities/Vec4_msg\n\
float64 r\n\
float64 g\n\
float64 b\n\
float64 a\n\
";
  }

  static const char* value(const ::prx_utilities::update_info_geoms_srvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prx_utilities::update_info_geoms_srvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.info_names);
      stream.next(m.info_configs);
      stream.next(m.info_colors);
      stream.next(m.poll_tf);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct update_info_geoms_srvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prx_utilities::update_info_geoms_srvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prx_utilities::update_info_geoms_srvRequest_<ContainerAllocator>& v)
  {
    s << indent << "info_names[]" << std::endl;
    for (size_t i = 0; i < v.info_names.size(); ++i)
    {
      s << indent << "  info_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.info_names[i]);
    }
    s << indent << "info_configs[]" << std::endl;
    for (size_t i = 0; i < v.info_configs.size(); ++i)
    {
      s << indent << "  info_configs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.info_configs[i]);
    }
    s << indent << "info_colors[]" << std::endl;
    for (size_t i = 0; i < v.info_colors.size(); ++i)
    {
      s << indent << "  info_colors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::prx_utilities::Vec4_msg_<ContainerAllocator> >::stream(s, indent + "    ", v.info_colors[i]);
    }
    s << indent << "poll_tf: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.poll_tf);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRX_UTILITIES_MESSAGE_UPDATE_INFO_GEOMS_SRVREQUEST_H
