// Generated by gencpp from file prx_utilities/describe_geometries_srvRequest.msg
// DO NOT EDIT!


#ifndef PRX_UTILITIES_MESSAGE_DESCRIBE_GEOMETRIES_SRVREQUEST_H
#define PRX_UTILITIES_MESSAGE_DESCRIBE_GEOMETRIES_SRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <prx_utilities/rigid_body_info_msg.h>

namespace prx_utilities
{
template <class ContainerAllocator>
struct describe_geometries_srvRequest_
{
  typedef describe_geometries_srvRequest_<ContainerAllocator> Type;

  describe_geometries_srvRequest_()
    : rigid_body_array()  {
    }
  describe_geometries_srvRequest_(const ContainerAllocator& _alloc)
    : rigid_body_array(_alloc)  {
    }



   typedef std::vector< ::prx_utilities::rigid_body_info_msg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::prx_utilities::rigid_body_info_msg_<ContainerAllocator> >::other >  _rigid_body_array_type;
  _rigid_body_array_type rigid_body_array;




  typedef boost::shared_ptr< ::prx_utilities::describe_geometries_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prx_utilities::describe_geometries_srvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct describe_geometries_srvRequest_

typedef ::prx_utilities::describe_geometries_srvRequest_<std::allocator<void> > describe_geometries_srvRequest;

typedef boost::shared_ptr< ::prx_utilities::describe_geometries_srvRequest > describe_geometries_srvRequestPtr;
typedef boost::shared_ptr< ::prx_utilities::describe_geometries_srvRequest const> describe_geometries_srvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prx_utilities::describe_geometries_srvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prx_utilities::describe_geometries_srvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace prx_utilities

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'prx_utilities': ['/home/parallels/Desktop/ROS_workspace/src/prx_utilities/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::prx_utilities::describe_geometries_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prx_utilities::describe_geometries_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prx_utilities::describe_geometries_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prx_utilities::describe_geometries_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prx_utilities::describe_geometries_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prx_utilities::describe_geometries_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prx_utilities::describe_geometries_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da70fe18cb30b72403000d18aa1b41d0";
  }

  static const char* value(const ::prx_utilities::describe_geometries_srvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda70fe18cb30b724ULL;
  static const uint64_t static_value2 = 0x03000d18aa1b41d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::prx_utilities::describe_geometries_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prx_utilities/describe_geometries_srvRequest";
  }

  static const char* value(const ::prx_utilities::describe_geometries_srvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prx_utilities::describe_geometries_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prx_utilities/rigid_body_info_msg[] rigid_body_array\n\
\n\
================================================================================\n\
MSG: prx_utilities/rigid_body_info_msg\n\
uint8 SPHERE=1\n\
uint8 BOX=2\n\
uint8 CONE=3\n\
uint8 CYLINDER=4\n\
uint8 OPEN_CYLINDER=5\n\
uint8 CAPSULE=6\n\
uint8 TRIANGLE=7\n\
uint8 QUAD=8\n\
uint8 LINES=9\n\
uint8 LINESTRIP=10\n\
uint8 MESH=11\n\
\n\
string system_name\n\
string rigid_body_name\n\
string material_name\n\
uint8 geometry_type\n\
float64[] geometry_params\n\
float64[] color_rgba\n\
";
  }

  static const char* value(const ::prx_utilities::describe_geometries_srvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prx_utilities::describe_geometries_srvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rigid_body_array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct describe_geometries_srvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prx_utilities::describe_geometries_srvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prx_utilities::describe_geometries_srvRequest_<ContainerAllocator>& v)
  {
    s << indent << "rigid_body_array[]" << std::endl;
    for (size_t i = 0; i < v.rigid_body_array.size(); ++i)
    {
      s << indent << "  rigid_body_array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::prx_utilities::rigid_body_info_msg_<ContainerAllocator> >::stream(s, indent + "    ", v.rigid_body_array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRX_UTILITIES_MESSAGE_DESCRIBE_GEOMETRIES_SRVREQUEST_H
