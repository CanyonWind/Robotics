// Generated by gencpp from file prx_utilities/add_twoD_text_srvRequest.msg
// DO NOT EDIT!


#ifndef PRX_UTILITIES_MESSAGE_ADD_TWOD_TEXT_SRVREQUEST_H
#define PRX_UTILITIES_MESSAGE_ADD_TWOD_TEXT_SRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace prx_utilities
{
template <class ContainerAllocator>
struct add_twoD_text_srvRequest_
{
  typedef add_twoD_text_srvRequest_<ContainerAllocator> Type;

  add_twoD_text_srvRequest_()
    : our_name()
    , associate_system()
    , text()
    , font()
    , relative_position()
    , color()
    , text_size(0.0)  {
    }
  add_twoD_text_srvRequest_(const ContainerAllocator& _alloc)
    : our_name(_alloc)
    , associate_system(_alloc)
    , text(_alloc)
    , font(_alloc)
    , relative_position(_alloc)
    , color(_alloc)
    , text_size(0.0)  {
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _our_name_type;
  _our_name_type our_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _associate_system_type;
  _associate_system_type associate_system;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _text_type;
  _text_type text;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _font_type;
  _font_type font;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _relative_position_type;
  _relative_position_type relative_position;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _color_type;
  _color_type color;

   typedef double _text_size_type;
  _text_size_type text_size;




  typedef boost::shared_ptr< ::prx_utilities::add_twoD_text_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prx_utilities::add_twoD_text_srvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct add_twoD_text_srvRequest_

typedef ::prx_utilities::add_twoD_text_srvRequest_<std::allocator<void> > add_twoD_text_srvRequest;

typedef boost::shared_ptr< ::prx_utilities::add_twoD_text_srvRequest > add_twoD_text_srvRequestPtr;
typedef boost::shared_ptr< ::prx_utilities::add_twoD_text_srvRequest const> add_twoD_text_srvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prx_utilities::add_twoD_text_srvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prx_utilities::add_twoD_text_srvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace prx_utilities

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'prx_utilities': ['/home/parallels/Desktop/ROS_workspace/src/prx_utilities/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::prx_utilities::add_twoD_text_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prx_utilities::add_twoD_text_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prx_utilities::add_twoD_text_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prx_utilities::add_twoD_text_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prx_utilities::add_twoD_text_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prx_utilities::add_twoD_text_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prx_utilities::add_twoD_text_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a6cc3fdf0f60164e1faf4c881d50a0db";
  }

  static const char* value(const ::prx_utilities::add_twoD_text_srvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa6cc3fdf0f60164eULL;
  static const uint64_t static_value2 = 0x1faf4c881d50a0dbULL;
};

template<class ContainerAllocator>
struct DataType< ::prx_utilities::add_twoD_text_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prx_utilities/add_twoD_text_srvRequest";
  }

  static const char* value(const ::prx_utilities::add_twoD_text_srvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prx_utilities::add_twoD_text_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string our_name\n\
string associate_system\n\
string text\n\
string font\n\
float64[] relative_position\n\
float64[] color\n\
float64 text_size\n\
";
  }

  static const char* value(const ::prx_utilities::add_twoD_text_srvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prx_utilities::add_twoD_text_srvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.our_name);
      stream.next(m.associate_system);
      stream.next(m.text);
      stream.next(m.font);
      stream.next(m.relative_position);
      stream.next(m.color);
      stream.next(m.text_size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct add_twoD_text_srvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prx_utilities::add_twoD_text_srvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prx_utilities::add_twoD_text_srvRequest_<ContainerAllocator>& v)
  {
    s << indent << "our_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.our_name);
    s << indent << "associate_system: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.associate_system);
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.text);
    s << indent << "font: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.font);
    s << indent << "relative_position[]" << std::endl;
    for (size_t i = 0; i < v.relative_position.size(); ++i)
    {
      s << indent << "  relative_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.relative_position[i]);
    }
    s << indent << "color[]" << std::endl;
    for (size_t i = 0; i < v.color.size(); ++i)
    {
      s << indent << "  color[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.color[i]);
    }
    s << indent << "text_size: ";
    Printer<double>::stream(s, indent + "  ", v.text_size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRX_UTILITIES_MESSAGE_ADD_TWOD_TEXT_SRVREQUEST_H
