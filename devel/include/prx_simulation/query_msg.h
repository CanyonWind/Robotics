// Generated by gencpp from file prx_simulation/query_msg.msg
// DO NOT EDIT!


#ifndef PRX_SIMULATION_MESSAGE_QUERY_MSG_H
#define PRX_SIMULATION_MESSAGE_QUERY_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <prx_simulation/plant_locations_msg.h>

namespace prx_simulation
{
template <class ContainerAllocator>
struct query_msg_
{
  typedef query_msg_<ContainerAllocator> Type;

  query_msg_()
    : consumer()
    , start()
    , goal()
    , goal_region_radius(0.0)
    , smooth_plan(false)
    , set_goal_criterion(false)
    , plant_locations()  {
    }
  query_msg_(const ContainerAllocator& _alloc)
    : consumer(_alloc)
    , start(_alloc)
    , goal(_alloc)
    , goal_region_radius(0.0)
    , smooth_plan(false)
    , set_goal_criterion(false)
    , plant_locations(_alloc)  {
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _consumer_type;
  _consumer_type consumer;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _start_type;
  _start_type start;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _goal_type;
  _goal_type goal;

   typedef double _goal_region_radius_type;
  _goal_region_radius_type goal_region_radius;

   typedef uint8_t _smooth_plan_type;
  _smooth_plan_type smooth_plan;

   typedef uint8_t _set_goal_criterion_type;
  _set_goal_criterion_type set_goal_criterion;

   typedef  ::prx_simulation::plant_locations_msg_<ContainerAllocator>  _plant_locations_type;
  _plant_locations_type plant_locations;




  typedef boost::shared_ptr< ::prx_simulation::query_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prx_simulation::query_msg_<ContainerAllocator> const> ConstPtr;

}; // struct query_msg_

typedef ::prx_simulation::query_msg_<std::allocator<void> > query_msg;

typedef boost::shared_ptr< ::prx_simulation::query_msg > query_msgPtr;
typedef boost::shared_ptr< ::prx_simulation::query_msg const> query_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prx_simulation::query_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prx_simulation::query_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace prx_simulation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'prx_simulation': ['/home/parallels/Desktop/ROS_workspace/src/prx_simulation/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::prx_simulation::query_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prx_simulation::query_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prx_simulation::query_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prx_simulation::query_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prx_simulation::query_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prx_simulation::query_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prx_simulation::query_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fb31a10de45da54e6e1d08424cc04ea2";
  }

  static const char* value(const ::prx_simulation::query_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfb31a10de45da54eULL;
  static const uint64_t static_value2 = 0x6e1d08424cc04ea2ULL;
};

template<class ContainerAllocator>
struct DataType< ::prx_simulation::query_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prx_simulation/query_msg";
  }

  static const char* value(const ::prx_simulation::query_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prx_simulation::query_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string consumer\n\
float64[] start\n\
float64[] goal\n\
float64 goal_region_radius\n\
bool smooth_plan\n\
bool set_goal_criterion\n\
plant_locations_msg plant_locations\n\
================================================================================\n\
MSG: prx_simulation/plant_locations_msg\n\
state_msg[] plant_states\n\
string[] plant_paths\n\
string node_name\n\
================================================================================\n\
MSG: prx_simulation/state_msg\n\
float64[] elements\n\
string node_name\n\
string consumer_name\n\
float64 timestamp\n\
";
  }

  static const char* value(const ::prx_simulation::query_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prx_simulation::query_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.consumer);
      stream.next(m.start);
      stream.next(m.goal);
      stream.next(m.goal_region_radius);
      stream.next(m.smooth_plan);
      stream.next(m.set_goal_criterion);
      stream.next(m.plant_locations);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct query_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prx_simulation::query_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prx_simulation::query_msg_<ContainerAllocator>& v)
  {
    s << indent << "consumer: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.consumer);
    s << indent << "start[]" << std::endl;
    for (size_t i = 0; i < v.start.size(); ++i)
    {
      s << indent << "  start[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.start[i]);
    }
    s << indent << "goal[]" << std::endl;
    for (size_t i = 0; i < v.goal.size(); ++i)
    {
      s << indent << "  goal[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.goal[i]);
    }
    s << indent << "goal_region_radius: ";
    Printer<double>::stream(s, indent + "  ", v.goal_region_radius);
    s << indent << "smooth_plan: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.smooth_plan);
    s << indent << "set_goal_criterion: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_goal_criterion);
    s << indent << "plant_locations: ";
    s << std::endl;
    Printer< ::prx_simulation::plant_locations_msg_<ContainerAllocator> >::stream(s, indent + "  ", v.plant_locations);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRX_SIMULATION_MESSAGE_QUERY_MSG_H
