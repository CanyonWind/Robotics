// Generated by gencpp from file prx_simulation/interval_msg.msg
// DO NOT EDIT!


#ifndef PRX_SIMULATION_MESSAGE_INTERVAL_MSG_H
#define PRX_SIMULATION_MESSAGE_INTERVAL_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace prx_simulation
{
template <class ContainerAllocator>
struct interval_msg_
{
  typedef interval_msg_<ContainerAllocator> Type;

  interval_msg_()
    : lower(0.0)
    , upper(0.0)
    , pathname()  {
    }
  interval_msg_(const ContainerAllocator& _alloc)
    : lower(0.0)
    , upper(0.0)
    , pathname(_alloc)  {
    }



   typedef double _lower_type;
  _lower_type lower;

   typedef double _upper_type;
  _upper_type upper;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pathname_type;
  _pathname_type pathname;




  typedef boost::shared_ptr< ::prx_simulation::interval_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prx_simulation::interval_msg_<ContainerAllocator> const> ConstPtr;

}; // struct interval_msg_

typedef ::prx_simulation::interval_msg_<std::allocator<void> > interval_msg;

typedef boost::shared_ptr< ::prx_simulation::interval_msg > interval_msgPtr;
typedef boost::shared_ptr< ::prx_simulation::interval_msg const> interval_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prx_simulation::interval_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prx_simulation::interval_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace prx_simulation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'prx_simulation': ['/home/parallels/Desktop/ROS_workspace/src/prx_simulation/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::prx_simulation::interval_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prx_simulation::interval_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prx_simulation::interval_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prx_simulation::interval_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prx_simulation::interval_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prx_simulation::interval_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prx_simulation::interval_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2d4b99d90c7c074a31d7977d2e3a7f2";
  }

  static const char* value(const ::prx_simulation::interval_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe2d4b99d90c7c074ULL;
  static const uint64_t static_value2 = 0xa31d7977d2e3a7f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::prx_simulation::interval_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prx_simulation/interval_msg";
  }

  static const char* value(const ::prx_simulation::interval_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prx_simulation::interval_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 lower\n\
float64 upper\n\
string pathname\n\
";
  }

  static const char* value(const ::prx_simulation::interval_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prx_simulation::interval_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lower);
      stream.next(m.upper);
      stream.next(m.pathname);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct interval_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prx_simulation::interval_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prx_simulation::interval_msg_<ContainerAllocator>& v)
  {
    s << indent << "lower: ";
    Printer<double>::stream(s, indent + "  ", v.lower);
    s << indent << "upper: ";
    Printer<double>::stream(s, indent + "  ", v.upper);
    s << indent << "pathname: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pathname);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRX_SIMULATION_MESSAGE_INTERVAL_MSG_H
