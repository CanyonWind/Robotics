// Generated by gencpp from file prx_simulation/bomberman_info_msg.msg
// DO NOT EDIT!


#ifndef PRX_SIMULATION_MESSAGE_BOMBERMAN_INFO_MSG_H
#define PRX_SIMULATION_MESSAGE_BOMBERMAN_INFO_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace prx_simulation
{
template <class ContainerAllocator>
struct bomberman_info_msg_
{
  typedef bomberman_info_msg_<ContainerAllocator> Type;

  bomberman_info_msg_()
    : node_name()
    , consumer()
    , goal_radius(0.0)
    , bomb_radius(0.0)
    , bomb_frequency(0.0)
    , my_bomb_state()
    , opp_bomb_state()
    , my_goal()
    , opp_goal()
    , my_position()
    , opp_position()
    , my_respawn()
    , opp_respawn()
    , timestamp(0.0)
    , exploded(false)
    , new_contingency_used(false)
    , contingency_length(0.0)  {
    }
  bomberman_info_msg_(const ContainerAllocator& _alloc)
    : node_name(_alloc)
    , consumer(_alloc)
    , goal_radius(0.0)
    , bomb_radius(0.0)
    , bomb_frequency(0.0)
    , my_bomb_state(_alloc)
    , opp_bomb_state(_alloc)
    , my_goal(_alloc)
    , opp_goal(_alloc)
    , my_position(_alloc)
    , opp_position(_alloc)
    , my_respawn(_alloc)
    , opp_respawn(_alloc)
    , timestamp(0.0)
    , exploded(false)
    , new_contingency_used(false)
    , contingency_length(0.0)  {
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _node_name_type;
  _node_name_type node_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _consumer_type;
  _consumer_type consumer;

   typedef double _goal_radius_type;
  _goal_radius_type goal_radius;

   typedef double _bomb_radius_type;
  _bomb_radius_type bomb_radius;

   typedef double _bomb_frequency_type;
  _bomb_frequency_type bomb_frequency;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _my_bomb_state_type;
  _my_bomb_state_type my_bomb_state;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _opp_bomb_state_type;
  _opp_bomb_state_type opp_bomb_state;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _my_goal_type;
  _my_goal_type my_goal;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _opp_goal_type;
  _opp_goal_type opp_goal;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _my_position_type;
  _my_position_type my_position;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _opp_position_type;
  _opp_position_type opp_position;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _my_respawn_type;
  _my_respawn_type my_respawn;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _opp_respawn_type;
  _opp_respawn_type opp_respawn;

   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef uint8_t _exploded_type;
  _exploded_type exploded;

   typedef uint8_t _new_contingency_used_type;
  _new_contingency_used_type new_contingency_used;

   typedef double _contingency_length_type;
  _contingency_length_type contingency_length;




  typedef boost::shared_ptr< ::prx_simulation::bomberman_info_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prx_simulation::bomberman_info_msg_<ContainerAllocator> const> ConstPtr;

}; // struct bomberman_info_msg_

typedef ::prx_simulation::bomberman_info_msg_<std::allocator<void> > bomberman_info_msg;

typedef boost::shared_ptr< ::prx_simulation::bomberman_info_msg > bomberman_info_msgPtr;
typedef boost::shared_ptr< ::prx_simulation::bomberman_info_msg const> bomberman_info_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prx_simulation::bomberman_info_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prx_simulation::bomberman_info_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace prx_simulation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'prx_simulation': ['/home/parallels/Desktop/ROS_workspace/src/prx_simulation/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::prx_simulation::bomberman_info_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prx_simulation::bomberman_info_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prx_simulation::bomberman_info_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prx_simulation::bomberman_info_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prx_simulation::bomberman_info_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prx_simulation::bomberman_info_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prx_simulation::bomberman_info_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b790097f9f5658711ee7be4fcef0fc52";
  }

  static const char* value(const ::prx_simulation::bomberman_info_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb790097f9f565871ULL;
  static const uint64_t static_value2 = 0x1ee7be4fcef0fc52ULL;
};

template<class ContainerAllocator>
struct DataType< ::prx_simulation::bomberman_info_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prx_simulation/bomberman_info_msg";
  }

  static const char* value(const ::prx_simulation::bomberman_info_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prx_simulation::bomberman_info_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string node_name\n\
string consumer\n\
float64 goal_radius\n\
float64 bomb_radius\n\
float64 bomb_frequency\n\
float64[] my_bomb_state\n\
geometry_msgs/Point[] opp_bomb_state\n\
float64[] my_goal\n\
geometry_msgs/Point[] opp_goal\n\
float64[] my_position\n\
geometry_msgs/Point[] opp_position\n\
float64[] my_respawn\n\
geometry_msgs/Point[] opp_respawn\n\
float64 timestamp\n\
bool exploded\n\
bool new_contingency_used\n\
float64 contingency_length\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::prx_simulation::bomberman_info_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prx_simulation::bomberman_info_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.node_name);
      stream.next(m.consumer);
      stream.next(m.goal_radius);
      stream.next(m.bomb_radius);
      stream.next(m.bomb_frequency);
      stream.next(m.my_bomb_state);
      stream.next(m.opp_bomb_state);
      stream.next(m.my_goal);
      stream.next(m.opp_goal);
      stream.next(m.my_position);
      stream.next(m.opp_position);
      stream.next(m.my_respawn);
      stream.next(m.opp_respawn);
      stream.next(m.timestamp);
      stream.next(m.exploded);
      stream.next(m.new_contingency_used);
      stream.next(m.contingency_length);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct bomberman_info_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prx_simulation::bomberman_info_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prx_simulation::bomberman_info_msg_<ContainerAllocator>& v)
  {
    s << indent << "node_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.node_name);
    s << indent << "consumer: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.consumer);
    s << indent << "goal_radius: ";
    Printer<double>::stream(s, indent + "  ", v.goal_radius);
    s << indent << "bomb_radius: ";
    Printer<double>::stream(s, indent + "  ", v.bomb_radius);
    s << indent << "bomb_frequency: ";
    Printer<double>::stream(s, indent + "  ", v.bomb_frequency);
    s << indent << "my_bomb_state[]" << std::endl;
    for (size_t i = 0; i < v.my_bomb_state.size(); ++i)
    {
      s << indent << "  my_bomb_state[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.my_bomb_state[i]);
    }
    s << indent << "opp_bomb_state[]" << std::endl;
    for (size_t i = 0; i < v.opp_bomb_state.size(); ++i)
    {
      s << indent << "  opp_bomb_state[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.opp_bomb_state[i]);
    }
    s << indent << "my_goal[]" << std::endl;
    for (size_t i = 0; i < v.my_goal.size(); ++i)
    {
      s << indent << "  my_goal[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.my_goal[i]);
    }
    s << indent << "opp_goal[]" << std::endl;
    for (size_t i = 0; i < v.opp_goal.size(); ++i)
    {
      s << indent << "  opp_goal[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.opp_goal[i]);
    }
    s << indent << "my_position[]" << std::endl;
    for (size_t i = 0; i < v.my_position.size(); ++i)
    {
      s << indent << "  my_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.my_position[i]);
    }
    s << indent << "opp_position[]" << std::endl;
    for (size_t i = 0; i < v.opp_position.size(); ++i)
    {
      s << indent << "  opp_position[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.opp_position[i]);
    }
    s << indent << "my_respawn[]" << std::endl;
    for (size_t i = 0; i < v.my_respawn.size(); ++i)
    {
      s << indent << "  my_respawn[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.my_respawn[i]);
    }
    s << indent << "opp_respawn[]" << std::endl;
    for (size_t i = 0; i < v.opp_respawn.size(); ++i)
    {
      s << indent << "  opp_respawn[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.opp_respawn[i]);
    }
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "exploded: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.exploded);
    s << indent << "new_contingency_used: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.new_contingency_used);
    s << indent << "contingency_length: ";
    Printer<double>::stream(s, indent + "  ", v.contingency_length);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRX_SIMULATION_MESSAGE_BOMBERMAN_INFO_MSG_H
