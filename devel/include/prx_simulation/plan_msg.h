// Generated by gencpp from file prx_simulation/plan_msg.msg
// DO NOT EDIT!


#ifndef PRX_SIMULATION_MESSAGE_PLAN_MSG_H
#define PRX_SIMULATION_MESSAGE_PLAN_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <prx_simulation/control_msg.h>

namespace prx_simulation
{
template <class ContainerAllocator>
struct plan_msg_
{
  typedef plan_msg_<ContainerAllocator> Type;

  plan_msg_()
    : plan()
    , end_state()
    , system_name()  {
    }
  plan_msg_(const ContainerAllocator& _alloc)
    : plan(_alloc)
    , end_state(_alloc)
    , system_name(_alloc)  {
    }



   typedef std::vector< ::prx_simulation::control_msg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::prx_simulation::control_msg_<ContainerAllocator> >::other >  _plan_type;
  _plan_type plan;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _end_state_type;
  _end_state_type end_state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _system_name_type;
  _system_name_type system_name;




  typedef boost::shared_ptr< ::prx_simulation::plan_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prx_simulation::plan_msg_<ContainerAllocator> const> ConstPtr;

}; // struct plan_msg_

typedef ::prx_simulation::plan_msg_<std::allocator<void> > plan_msg;

typedef boost::shared_ptr< ::prx_simulation::plan_msg > plan_msgPtr;
typedef boost::shared_ptr< ::prx_simulation::plan_msg const> plan_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prx_simulation::plan_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prx_simulation::plan_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace prx_simulation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'prx_simulation': ['/home/parallels/Desktop/ROS_workspace/src/prx_simulation/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::prx_simulation::plan_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prx_simulation::plan_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prx_simulation::plan_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prx_simulation::plan_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prx_simulation::plan_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prx_simulation::plan_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prx_simulation::plan_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c573b368b2e096f9b53f72769f6a278f";
  }

  static const char* value(const ::prx_simulation::plan_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc573b368b2e096f9ULL;
  static const uint64_t static_value2 = 0xb53f72769f6a278fULL;
};

template<class ContainerAllocator>
struct DataType< ::prx_simulation::plan_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prx_simulation/plan_msg";
  }

  static const char* value(const ::prx_simulation::plan_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prx_simulation::plan_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prx_simulation/control_msg[] plan\n\
float64[] end_state\n\
string system_name\n\
\n\
================================================================================\n\
MSG: prx_simulation/control_msg\n\
float64[] control\n\
float64 duration\n\
";
  }

  static const char* value(const ::prx_simulation::plan_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prx_simulation::plan_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.plan);
      stream.next(m.end_state);
      stream.next(m.system_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct plan_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prx_simulation::plan_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prx_simulation::plan_msg_<ContainerAllocator>& v)
  {
    s << indent << "plan[]" << std::endl;
    for (size_t i = 0; i < v.plan.size(); ++i)
    {
      s << indent << "  plan[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::prx_simulation::control_msg_<ContainerAllocator> >::stream(s, indent + "    ", v.plan[i]);
    }
    s << indent << "end_state[]" << std::endl;
    for (size_t i = 0; i < v.end_state.size(); ++i)
    {
      s << indent << "  end_state[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.end_state[i]);
    }
    s << indent << "system_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.system_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRX_SIMULATION_MESSAGE_PLAN_MSG_H
