// Generated by gencpp from file prx_simulation/request_space_information_srvResponse.msg
// DO NOT EDIT!


#ifndef PRX_SIMULATION_MESSAGE_REQUEST_SPACE_INFORMATION_SRVRESPONSE_H
#define PRX_SIMULATION_MESSAGE_REQUEST_SPACE_INFORMATION_SRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <prx_simulation/interval_msg.h>
#include <prx_simulation/interval_msg.h>

namespace prx_simulation
{
template <class ContainerAllocator>
struct request_space_information_srvResponse_
{
  typedef request_space_information_srvResponse_<ContainerAllocator> Type;

  request_space_information_srvResponse_()
    : state_space_intervals()
    , control_space_intervals()  {
    }
  request_space_information_srvResponse_(const ContainerAllocator& _alloc)
    : state_space_intervals(_alloc)
    , control_space_intervals(_alloc)  {
    }



   typedef std::vector< ::prx_simulation::interval_msg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::prx_simulation::interval_msg_<ContainerAllocator> >::other >  _state_space_intervals_type;
  _state_space_intervals_type state_space_intervals;

   typedef std::vector< ::prx_simulation::interval_msg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::prx_simulation::interval_msg_<ContainerAllocator> >::other >  _control_space_intervals_type;
  _control_space_intervals_type control_space_intervals;




  typedef boost::shared_ptr< ::prx_simulation::request_space_information_srvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prx_simulation::request_space_information_srvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct request_space_information_srvResponse_

typedef ::prx_simulation::request_space_information_srvResponse_<std::allocator<void> > request_space_information_srvResponse;

typedef boost::shared_ptr< ::prx_simulation::request_space_information_srvResponse > request_space_information_srvResponsePtr;
typedef boost::shared_ptr< ::prx_simulation::request_space_information_srvResponse const> request_space_information_srvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prx_simulation::request_space_information_srvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prx_simulation::request_space_information_srvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace prx_simulation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'prx_simulation': ['/home/parallels/Desktop/ROS_workspace/src/prx_simulation/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::prx_simulation::request_space_information_srvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prx_simulation::request_space_information_srvResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prx_simulation::request_space_information_srvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prx_simulation::request_space_information_srvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prx_simulation::request_space_information_srvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prx_simulation::request_space_information_srvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prx_simulation::request_space_information_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "04a1df5caba38948c1ec4353cea80064";
  }

  static const char* value(const ::prx_simulation::request_space_information_srvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x04a1df5caba38948ULL;
  static const uint64_t static_value2 = 0xc1ec4353cea80064ULL;
};

template<class ContainerAllocator>
struct DataType< ::prx_simulation::request_space_information_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prx_simulation/request_space_information_srvResponse";
  }

  static const char* value(const ::prx_simulation::request_space_information_srvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prx_simulation::request_space_information_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
interval_msg[] state_space_intervals\n\
interval_msg[] control_space_intervals\n\
\n\
\n\
================================================================================\n\
MSG: prx_simulation/interval_msg\n\
float64 lower\n\
float64 upper\n\
string pathname\n\
";
  }

  static const char* value(const ::prx_simulation::request_space_information_srvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prx_simulation::request_space_information_srvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state_space_intervals);
      stream.next(m.control_space_intervals);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct request_space_information_srvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prx_simulation::request_space_information_srvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prx_simulation::request_space_information_srvResponse_<ContainerAllocator>& v)
  {
    s << indent << "state_space_intervals[]" << std::endl;
    for (size_t i = 0; i < v.state_space_intervals.size(); ++i)
    {
      s << indent << "  state_space_intervals[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::prx_simulation::interval_msg_<ContainerAllocator> >::stream(s, indent + "    ", v.state_space_intervals[i]);
    }
    s << indent << "control_space_intervals[]" << std::endl;
    for (size_t i = 0; i < v.control_space_intervals.size(); ++i)
    {
      s << indent << "  control_space_intervals[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::prx_simulation::interval_msg_<ContainerAllocator> >::stream(s, indent + "    ", v.control_space_intervals[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRX_SIMULATION_MESSAGE_REQUEST_SPACE_INFORMATION_SRVRESPONSE_H
