<launch>
 <rosparam>
  <!-- First define the mapping between simulation and world model plants -->
  system_mapping:
  - 
    pair: [simulator/consumer/baxter, world_model/simulator/baxter]

  consumer: simulator/consumer
  world_model:
    type: default_world_model
  </rosparam>

  <!-- 	First define the embedding names you are going to use. 
	This part of the file only specifies the default mapping function
	for things that don't define a mapping.-->
  <rosparam ns="world_model/planning_contexts">
  full_space:
    default:
      type: full_mapping
  left_full_arm:
      default:
        type: "obstacle_mapping"
  left_arm:
      default:
       type: "obstacle_mapping"
  </rosparam>

  <rosparam ns="world_model/simulator/subsystems/baxter">
    planning_contexts:
      left_full_arm:
        type: "baxter_left_full_arm_state_mapping"
      left_arm:
        type: "baxter_left_arm_state_mapping"
  </rosparam>

  <!-- This file is reincluded for the event where planning runs without simulation-->
  <rosparam command="load" file="$(find prx_input)/templates/spaces/space_types.yaml"/>

  <!-- Specify the internal simulator and systems the world model will use -->
  <rosparam ns="world_model" command="load" file="$(find prx_input)/templates/simulators/default_simulator.yaml"/>

  <!-- 	Set up concrete system tree. For each system with state, you can define an embedding for that state.
	Otherwise, the default from above is used. -->
        
  <rosparam command="load" ns="world_model/simulator/subsystems/baxter" file="$(find manipulation)/input/baxter/baxter.yaml"/>


  <rosparam ns="world_model/simulator/obstacles">
    ball:
      type: obstacle
      geometries:
        -
          name: ball
          collision_geometry:
            type: sphere
            radius: 0.2
            material: red
          config:
            position: [0.9, 0.4, 1.2]
            orientation: [0, 0, 0, 1]
  </rosparam>


</launch>
