<launch>  
<rosparam command="load" ns="planning" file="$(find prx_input)/templates/planning_applications/single_query_application.yaml"/>
<rosparam>
planning:
  simulate: true
  visualize: true
  random_seed: 9849
  persistent: false
</rosparam>


  <rosparam ns="planning/world_model">
    black_list:
        - [simulator/wall, [simulator/obstacles/obs,simulator/car1,simulator/obstacles/building2]]
        - [simulator/car1, [simulator/obstacles/obs]]
  </rosparam>
<rosparam command="load" ns="planning/motion_planner" file="$(find prx_input)/templates/motion_planners/sst.yaml"/>
<rosparam command="load" ns="planning/task_planner" file="$(find prx_input)/templates/task_planners/single_shot.yaml"/>
<rosparam ns="planning/task_planner/planners/planner" >
template: motion_planner
space_name: space1
type: rrt
sample_metric:
  type: graph_distance_metric
  distance_function: default
max_points: 30000
near_threshold: 2
delta_drain: 0
delta_near: 0
rrt_first: true
use_heuristic: true
use_trrt_heuristic: false
branch_and_bound: false
complex_heuristic: false
steering: false
radius_solution: true
collision_checking: true
visualize: true
visualize_tree: true
visualize_solution: true
visualization_body: simulator/car1/chassis
</rosparam>
<rosparam command="load" ns="planning/task_planner" >
stats_criteria:
  elements:
    criterion1:
      type: timed_criterion
      condition: 10
</rosparam>  
<rosparam command="load" ns="planning/query_type" file="$(find prx_input)/templates/queries/motion_planning_query.yaml"/>
<rosparam command="load" ns="planning/specification_type" file="$(find prx_input)/templates/specifications/motion_planning_specification.yaml"/>
<rosparam command="load" ns="planning/query_type" >
start_state: [0,0,0]
goal:
  type: radial_goal_region
  distance_metric:
    type: linear_distance_metric
    distance_function: default
  goal_state: [250,0,0]
  radius: 30
</rosparam>

  <rosparam ns="planning/problems">
  problem1:
    specification:
      template: "specification_type" 
      seeds:
        -
          state: [0,0,0]
      validity_checker:
        type: temporal_validity_checker
      sampler:
        type: uniform_sampler
      local_planner:
        type: time_varying_local_planner
        lower_multiple: 10
        upper_multiple: 40
        learning_rate: .05
        accepted_radius: 2
        num_controls: 1
        max_multiple: 500
      distance_metric:
        type: graph_distance_metric
        distance_function: default
      stopping_criteria:
        elements:
          criterion1:
            type: timed_criterion
            condition: 120
    query:
      template: "query_type"
  </rosparam>



<rosparam command="load" ns="planning/world_model/planning_contexts" >
space1:
  use_embedded_space: true
  default:
    type: obstacle_mapping
</rosparam>
<rosparam command="load" ns="planning/world_model" file="$(find prx_input)/templates/simulators/bullet_simulator.yaml"/>

  <rosparam command="load" ns="planning/world_model/simulator/subsystems/car1"
    file="$(find prx_input)/templates/plants/bullet/car.yaml"/>
  <rosparam command="load" ns="planning/world_model/simulator/subsystems/wall"
    file="$(find prx_input)/templates/plants/bullet/new_wall.yaml"/>

  <rosparam command="load" ns="planning/world_model/simulator/subsystems/car1">
    planning_contexts:
      space1:
        type: bullet_car_to_se2
  </rosparam>


 <rosparam ns="planning">
  system_mapping:
  - 
    pair: [simulator/consumer/car1, world_model/simulator/car1]
  consumer: simulator/consumer
  consumer_mapping:
    - 
      pair: [simulator/consumer, space1]
  </rosparam>
  <rosparam command="load" ns="planning/world_model/simulator/obstacles"
    file="$(find prx_input)/templates/environments/bullet_car_maze.yaml"/>



<!-- SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM -->
  <rosparam command="load" file="$(find prx_input)/templates/spaces/space_types.yaml"/>
  <rosparam ns="simulation" command="load" file="$(find prx_input)/templates/applications/empty_application.yaml" />
  <rosparam ns="simulation" command="load" file="$(find prx_input)/templates//simulators/bullet_simulator.yaml"/>
  <rosparam command="load" ns="simulation/controller" file="$(find prx_input)/templates/controllers/consumer.yaml"/>


  <rosparam command="load" ns="simulation/simulator/subsystems/consumer">
    template: "controller"
  </rosparam>

  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/car1" file="$(find prx_input)/templates/plants/bullet/car.yaml"/>
  <rosparam command="load" ns="simulation/simulator/subsystems/wall" file="$(find prx_input)/templates/plants/bullet/new_wall.yaml"/>
  <rosparam command="load" ns="simulation/simulator/obstacles" file="$(find prx_input)/templates/environments/bullet_car_maze.yaml"/>




  <node name="planning" pkg="prx_planning" type="prx_planning"
        required="false" launch-prefix="" output="screen" args="planning" />


  <node name="simulation" pkg="prx_simulation" type="prx_simulation"
        required="true"   launch-prefix="" output="screen" args="simulation" />

  <include file="$(find prx_input)/templates/visualization/visualization.launch"/>


</launch>