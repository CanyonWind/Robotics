<launch>  
  <rosparam ns="simulation" command="load" file="$(find prx_input)/templates/applications/empty_application.yaml" />
  <rosparam ns="simulation" command="load" file="$(find prx_input)/templates/simulators/bullet_simulator.yaml"/>
  <rosparam command="load" file="$(find prx_input)/templates/spaces/space_types.yaml"/>
<rosparam ns="simulation/controller" file="$(find prx_input)/templates/controllers/consumer.yaml"/>

  <rosparam command="load" ns="simulation/simulator/subsystems/consumer/subsystems/rover"
    file="$(find prx_input)/templates/plants/bullet/rover.yaml"/>

<rosparam ns="simulation/simulator/subsystems/consumer">
  template: "controller"
  keep_last_control: false
  keep_last_state: false
</rosparam>

<rosparam ns="simulation/simulator" >
gravity: [0,0,-1.63]
</rosparam>
<rosparam ns="simulation/simulator/obstacles">
floor:
  type: bullet_obstacle
  geometries:
    -
      name: ground
      collision_geometry:
        type: heightmap
        filename: "heightmap.txt"
        material: baxter_red
      config:
        position: [0 0 -0.01]
        orientation: [0 0 0 1]
</rosparam>




  <rosparam ns="planning/world_model">
    black_list:
        - [simulator/rover, [simulator/obstacles/floor]]
  </rosparam>


  <rosparam ns="planning" file="$(find prx_input)/templates/planning_applications/single_query_application.yaml"/>
<rosparam ns="planning">
random_seed: 5165
consumer_mapping:
  - 
    pair: [simulator/consumer, space1]
</rosparam>
        
  <!-- Load template files -->
       
  <rosparam ns="planning/motion_planner/" file="$(find prx_input)/templates/motion_planners/sst.yaml"/>
 
  <rosparam ns="planning/task_planner/" file="$(find prx_input)/templates/task_planners/single_shot.yaml"/>

  <rosparam ns="planning/task_planner/" >
  </rosparam>

<rosparam ns="planning/task_planner/planners/" >
planner1:
  template: "motion_planner"
  type: isst
  space_name: space1
  visualization_body: "simulator/rover/chassis"
  visualize_tree: true
  visualize_solution: true
  sample_metric:
    type: graph_distance_metric
  max_points: 50001
  delta_drain: 0
  steering: false
  delta_near: 0
  collision_checking: true
  use_heuristic: true
  branch_and_bound: true
  rrt_first: false
  goal_bias_rate: 1
</rosparam>
       
  <rosparam ns="planning/query_type" file="$(find prx_input)/templates/queries/motion_planning_query.yaml"/>
<rosparam ns="planning/problems">
problem1:
  specification:
    type: motion_planning_specification
    validity_checker: 
      type: world_model_validity_checker
      cost_function: duration_cost
    sampler:
      type: uniform_sampler
    distance_metric:
      type: graph_distance_metric
    local_planner:
      type: time_varying_local_planner
      lower_multiple: 50
      upper_multiple: 200
    seeds:
      -
        state: [1 1 0]
    stopping_criteria:
      elements:
        criterion1:
          type: iteration_criterion
          condition: 3000
  query:
    template: "query_type"
    start_state: [1 1 0]
    goal:
      type: "radial_goal_region"
      distance_metric:
        type: ann_distance_metric
      radius: 5
      goal_state: [30 30 0]
</rosparam>

<rosparam ns="planning">
  system_mapping:
  - 
    pair: [simulator/consumer/rover, world_model/simulator/rover]

  consumer: simulator/consumer
</rosparam>
<rosparam command="load" ns="planning/world_model/planning_contexts" >
space1:
  use_embedded_space: true
  default:
    type: bullet_car_to_se2
</rosparam>
<rosparam ns="planning/world_model/simulator" >
gravity: [0,0,-1.63]
</rosparam>
  <rosparam ns="planning/world_model" file="$(find prx_input)/templates/simulators/bullet_simulator.yaml"/>
   
  <rosparam ns="planning/world_model/simulator/subsystems/rover" file="$(find prx_input)/templates/plants/bullet/rover.yaml"/>

<rosparam ns="planning/world_model/simulator/obstacles">
floor:
  type: bullet_obstacle
  geometries:
    -
      name: ground
      collision_geometry:
        type: heightmap
        filename: "heightmap.txt"
        material: baxter_red
      config:
        position: [0 0 -0.01]
        orientation: [0 0 0 1]
</rosparam>

  <node name="simulation" pkg="prx_simulation" type="prx_simulation"
        required="true"   launch-prefix="" output="screen" />

  <node name="planning" pkg="prx_planning" type="prx_planning"
        required="false" launch-prefix="" output="screen" args="planning" />

  <include file="$(find prx_input)/templates/visualization/visualization.launch"/>

</launch>