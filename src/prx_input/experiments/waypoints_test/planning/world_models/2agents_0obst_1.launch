<launch>
 <rosparam>
  <!-- First define the mapping between simulation and world model plants -->
  state_mapping:
  - 
    pair: [simulator/consumer/vo_controller/disk, world_model/simulator/disk]
  control_mapping:
  - 
    pair: [simulator/consumer/vo_controller, world_model/simulator/disk]
  - 
    pair: [simulator/consumer/vo_controller/disk, world_model/simulator/disk]

  consumer: simulator/consumer
  </rosparam>

  <!-- 	First define the embedding names you are going to use. 
	This part of the file only specifies the default mapping function
	for things that don't define a mapping.-->
  <rosparam ns="world_model/embeddings">
  space1:
    default:
      type: "full_mapping"
  </rosparam>

  <!-- This file is reincluded for the event where planning runs without simulation-->
  <rosparam command="load" file="$(find prx_input)/templates/spaces/space_types.yaml"/>

  <!-- Specify the internal simulator and systems the world model will use -->
  <rosparam ns="world_model" command="load" file="$(find prx_input)/templates/simulators/collision_stop_simulator.yaml"/>
          
  <rosparam ns="world_model/simulator/">
    simulation_step: 0.02
  </rosparam>

  <!-- 	Set up concrete system tree. For each system with state, you can define an embedding for that state.
	Otherwise, the default from above is used. -->
        
  <rosparam command="load" ns="world_model/simulator/subsystems/disk" file="$(find prx_input)/templates/plants/sliding_disk_rigid_body.yaml"/>

  <rosparam ns="world_model/simulator/subsystems/disk">
    initial_state: [-75,25]
    state_space: 
      min: [-150, -50]
      max: [150, 50]
    max_steps: 30
  </rosparam>
              
  <rosparam command="load" ns="world_model/simulator/obstacles"
     file="$(find prx_input)/templates/environments/forest.yaml"/>
              
</launch>
