<launch>
 <rosparam file="$(find prx_input)/templates/spaces/space_types.yaml"/>

<rosparam ns="simulation" file="$(find prx_input)/templates/applications/empty_application.yaml"/>
<rosparam ns="simulation" file="$(find prx_input)/templates/simulators/collision_stop_simulator.yaml"/>
<rosparam ns="simulation/controller" file="$(find prx_input)/templates/controllers/replanning.yaml"/>
<rosparam ns="simulation/plant" file="$(find prx_input)/templates/plants/disk.yaml"/>


  <rosparam command="load" ns="simulation/simulator/subsystems/consumer">
    template: controller
    planning_node: /planning
    keep_last_control: false
    goals:
      -
        goal:
            type: "radial_goal_region"
            distance_metric:
                type: linear_distance_metric
            goal_state: [180,180]
            radius: 5
                        
  </rosparam>

<rosparam ns="simulation/simulator/subsystems/consumer/subsystems/rover">
template: "plant"
initial_state: [-180,-180]
</rosparam>


  <rosparam ns="simulation/simulator/obstacles" file="$(find prx_input)/templates/environments/forest.yaml" />
  <rosparam ns="planning" file="$(find prx_input)/templates/planning_applications/ground_truth_query_application.yaml"/>

<rosparam ns="planning">
random_seed: 56849
consumer_mapping:
  - 
    pair: [simulator/consumer, true_space]
</rosparam>
        
  <!-- Load template files -->
       
  <rosparam ns="planning/motion_planner/" file="$(find prx_input)/templates/motion_planners/sst.yaml"/>
  <rosparam ns="planning/motion_planner2/" file="$(find prx_input)/templates/motion_planners/rrt_star.yaml"/>
 
  <rosparam ns="planning/task_planner/" >
    type: replanning_planner
    planning_duration: 1
    reset_underlying_planner: false
    duration_scaling: .9
  </rosparam>

<rosparam ns="planning/task_planner/planners/" >
prm:
  template: "motion_planner2"
  type: prm_star
  stretch_factor: 2.5
  space_name: "true_space"
  visualization_bodies: ["simulator/rigid_rover/body"]
  visualize_graph: false
  visualize_solution: true
</rosparam>
       
  <rosparam ns="planning/query_type" file="$(find prx_input)/templates/queries/motion_planning_query.yaml"/>
<rosparam ns="planning/problems">
problem1:
  specification:
    type: motion_planning_specification
    validity_checker: 
      type: world_model_validity_checker
      cost_function: trrt_cost_function
    sampler:
      type: uniform_sampler
    distance_metric:
      type: graph_distance_metric
    local_planner:
      type: bvp_local_planner
    stopping_criteria:
      elements:
        criterion1:
          type: iteration_criterion
          condition: 10000
  query:
    template: "query_type"
    start_state: [-180,-180]
    goal:
      type: "goal_state"
      distance_metric:
        type: ann_distance_metric
      goal_state: [180,180]
      radius: 5
</rosparam>

<rosparam ns="planning">
  system_mapping:
  - 
    pair: [simulator/consumer/rover, world_model/simulator/rigid_rover]

  consumer: simulator/consumer
</rosparam>

<rosparam ns="planning/world_model/planning_contexts">
true_space:
  default:
    type: "full_mapping"
</rosparam>
  <rosparam ns="planning/world_model" file="$(find prx_input)/templates/simulators/collision_stop_simulator.yaml"/>



  <rosparam ns="planning/world_model/simulator/obstacles" file="$(find prx_input)/templates/environments/forest.yaml" />

  <rosparam ns="planning/world_model/simulator/subsystems/rigid_rover" file="$(find prx_input)/templates/plants/disk.yaml"/>
  

<node name="simulation" pkg="prx_simulation" type="prx_simulation" required="true" launch-prefix="" output="screen" args="simulation"/>

<node name="planning" pkg="prx_planning" type="prx_planning" required="false" launch-prefix="" output="screen" args="planning" />

<include file="$(find prx_input)/templates/visualization/visualization.launch"/>


</launch>