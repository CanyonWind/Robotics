<launch>  
<rosparam command="load" ns="planning" file="$(find prx_input)/templates/planning_applications/single_query_application.yaml"/>
<rosparam>
planning:
  simulate: true
  visualize: true
  random_seed: 90
  persistent: false
</rosparam>
<rosparam command="load" ns="planning/motion_planner" file="$(find sparse_rrt)/input/templates/sparse_rrt.yaml"/>
<rosparam command="load" ns="planning/task_planner" file="$(find prx_input)/templates/task_planners/single_shot.yaml"/>
<rosparam ns="planning/task_planner/planners/planner" >
template: motion_planner
space_name: space1
validity_checker:
  type: world_model_validity_checker
sampler:
  type: uniform_sampler
local_planner:
  type: time_varying_local_planner
  lower_multiple: 100
  upper_multiple: 500
  learning_rate: .05
  accepted_radius: 2
  num_controls: 5
  max_multiple: 500
distance_metric:
  type: graph_distance_metric
  distance_function: default
max_points: 150000
near_threshold: 2
drain: false
radius_nearest: false
delta: 2
delta_multiple: 8
radius_solution: true
collision_checking: false
visualize: true
visualize_tree: false
visualize_solution: true
visualization_body: simulator/manipulator/ball
</rosparam>
<rosparam command="load" ns="planning/task_planner" >
stats_criteria:
  elements:
    criterion1:
      type: timed_criterion
      condition: 10
</rosparam>
<rosparam command="load" ns="planning/query_type" file="$(find prx_input)/templates/queries/motion_planning_query.yaml"/>
<rosparam command="load" ns="planning/query_type" >
start_state: [0,21]
goal:
  type: radial_goal_region
  distance_metric:
    type: linear_distance_metric
    distance_function: default
  goal_state: [21,0]
  radius: 5
stopping_criteria:
  elements:
    criterion1:
      type: timed_criterion
      condition: 300
</rosparam>
<rosparam command="load" ns="planning/queries/query1" >
template: query_type
</rosparam>
<rosparam command="load" ns="planning/world_model/embeddings" >
space1:
  default:
    type: ode_manipulator_end_effector
</rosparam>
<rosparam command="load" ns="planning/world_model" file="$(find prx_input)/templates/simulators/ode_simulator.yaml"/>

  <rosparam command="load" ns="planning/world_model/simulator/subsystems/manipulator"
    file="$(find prx_input)/templates/plants/ode/manipulator.yaml"/>

 <rosparam ns="planning">
  <!-- First define the mapping between simulation and world model plants -->
  system_mapping:
  - 
    pair: [simulator/consumer/manipulator, world_model/simulator/manipulator]

  consumer: simulator/consumer
  </rosparam>

  <rosparam command="load" ns="planning/world_model/simulator/obstacles"
     file="$(find prx_input)/templates/environments/ode_manipulator_environment.yaml"/>


  <node name="planning" pkg="prx_planning" type="prx_planning"
        required="false" launch-prefix="" output="screen" args="planning" />

<!-- SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM SIM -->
  <rosparam command="load" file="$(find prx_input)/templates/applications/empty_application.yaml" />
  <rosparam command="load" file="$(find prx_input)/templates//simulators/ode_simulator.yaml"/>
  <rosparam command="load" file="$(find prx_input)/templates/spaces/space_types.yaml"/>
  <rosparam command="load" ns="controller" file="$(find prx_input)/templates/controllers/consumer.yaml"/>

  <rosparam command="load" ns="simulator/subsystems/consumer">
    template: "controller"
  </rosparam>

  <rosparam command="load" ns="/simulator/subsystems/consumer/subsystems/manipulator"
    file="$(find prx_input)/templates/plants/ode/manipulator.yaml"/>

  <rosparam command="load" ns="/simulator/obstacles"
     file="$(find prx_input)/templates/environments/ode_manipulator_environment.yaml"/>

  <node name="simulation" pkg="prx_simulation" type="prx_simulation"
        required="true"   launch-prefix="" output="screen" />

  <include file="$(find prx_input)/templates/visualization/visualization.launch"/>


</launch>