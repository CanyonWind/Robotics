cmake_minimum_required(VERSION 2.6.3)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
set(ROS_BUILD_TYPE Debug)
set(CMAKE_CXX_FLAGS "-Wall")

rosbuild_init()

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

# Auxillary CMake functions
set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/CMakeModules)


#
# Locating PQP
#
find_library(PQPLIB PQP
	     paths /usr/local/lib /opt/local/lib
	     doc "PQP library")
find_path(PQPINCLUDE PQP.h
	  paths /usr/local/include/pqp /opt/local/include/PQP
	  doc "PQP include directory")
if(PQPLIB AND PQPINCLUDE)
    message("-- Found PQP library and header files")
    include_directories(${PQPINCLUDE})
    SET(PQP_FOUND 1)
else(PQPLIB AND PQPINCLUDE)
    message(WARNING "Could not find PQP library and header files")
endif(PQPLIB AND PQPINCLUDE)

#PNG
find_library(PNGLIB PRXPNG
	     paths ${CMAKE_SOURCE_DIR}/../prx_external/lib
	     doc "PNG library")
find_path(PNGINCLUDE lodepng.hpp
	  paths ${CMAKE_SOURCE_DIR}/../prx_external/PNGCreator
	  doc "PNG include directory")
if(PNGLIB AND PNGINCLUDE)
    message("-- Found PNG library and header files")
    message(${PNGINCLUDE})
    message(${PNGLIB})
    include_directories(${PNGINCLUDE})
    SET(PNG_FOUND 1)
else(PNGLIB AND PNGINCLUDE)
    message(WARNING "Could not find PNG library and header files")
endif(PNGLIB AND PNGINCLUDE)

#
# Locating XML
#
find_package(LibXml2)
include_directories(${LIBXML2_INCLUDE_DIR})


#
# OCTAVE
#
find_package(OCTAVE)
if(OCTAVE_FOUND)
        add_definitions(-DOCTAVE_FOUND)
	include_directories(${OCTAVE_INCLUDE_DIR})
endif(OCTAVE_FOUND)



# Define using STL flag for TinyXML
add_definitions(-DTIXML_USE_STL)

#
# Locating Boost
#
rosbuild_add_boost_directories()

#
# ANN
#
find_library(ANNLIB ANN
	     paths ${CMAKE_SOURCE_DIR}/../prx_external/lib
	     doc "ANN library")
find_path(ANNINCLUDE ANN.h
	  paths ${CMAKE_SOURCE_DIR}/../prx_external/ANN
	  doc "ANN include directory")
if(ANNLIB AND ANNINCLUDE)
    message("-- Found ANN library and header files")
    include_directories(${ANNINCLUDE})
    SET(ANN_FOUND 1)
else(ANNLIB AND ANNINCLUDE)
    message(WARNING "Could not find ANN library and header files")
endif(ANNLIB AND ANNINCLUDE)

##
## Adding subdirectories
##

include_directories(${PROJECT_SOURCE_DIR})
file(GLOB_RECURSE SRC_PLANNING ${PROJECT_SOURCE_DIR}/prx/planning/*.cpp)

### PACKAGES
### END PACKAGES

 



##
## Linking 
##
rosbuild_add_library(${PROJECT_NAME}_lib ${SRC_PLANNING} )
rosbuild_link_boost(${PROJECT_NAME}_lib filesystem system program_options)
rosbuild_add_executable(${PROJECT_NAME} ${PROJECT_SOURCE_DIR}/prx/main.cpp)
rosbuild_add_executable(planning_experiment ${PROJECT_SOURCE_DIR}/prx/experiment.cpp)

if(OCTAVE_FOUND)
    target_link_libraries(${PROJECT_NAME}_lib ${OCTAVE_LIBRARY} ${OCTAVE_INT_LIBRARY})
endif(OCTAVE_FOUND)
    target_link_libraries(${PROJECT_NAME}_lib ${LIBXML2_LIBRARIES} ${ANNLIB} ${PNGLIB})
    target_link_libraries(${PROJECT_NAME} ${PROJECT_NAME}_lib)
    target_link_libraries(planning_experiment ${PROJECT_NAME}_lib)

if(DEFINED ENV{NTRT_PATH})
include_directories($ENV{NTRT_PATH}/src)
file(GLOB_RECURSE NTRT_LIB $ENV{NTRT_PATH}/build/*.so)
target_link_libraries(${PROJECT_NAME}_lib ${NTRT_LIB})
endif()





