cmake_minimum_required(VERSION 2.6.3)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
set(ROS_BUILD_TYPE Debug)
set(CMAKE_CXX_FLAGS "-Wall")
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}/cmake_modules/")
 


#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)


file(GLOB_RECURSE MSG_UTIL RELATIVE ${PROJECT_SOURCE_DIR}/msg/ *.msg)
rosbuild_add_generated_msgs(${MSG_UTIL})



file(GLOB_RECURSE SRV_UTIL RELATIVE ${PROJECT_SOURCE_DIR}/srv/ *.srv)
rosbuild_add_generated_srvs(${SRV_UTIL})


rosbuild_init()
rosbuild_genmsg()
rosbuild_gensrv()

#
# Locating XML
#
find_package(LibXml2)
include_directories(${LIBXML2_INCLUDE_DIR})


#
# Locating Boost
#
rosbuild_add_boost_directories()


#
# ANN
#
find_library(ANNLIB ANN
	     paths ${CMAKE_SOURCE_DIR}/../prx_external/lib
	     doc "ANN library")
find_path(ANNINCLUDE ANN.h
	  paths ${CMAKE_SOURCE_DIR}/../prx_external/ANN
	  doc "ANN include directory")
if(ANNLIB AND ANNINCLUDE)
    message("-- Found ANN library and header files")
    include_directories(${ANNINCLUDE})
    SET(ANN_FOUND 1)
else(ANNLIB AND ANNINCLUDE)
    message(WARNING "Could not find ANN library and header files")
endif(ANNLIB AND ANNINCLUDE)

#PNG
find_library(PNGLIB PRXPNG
	     paths ${CMAKE_SOURCE_DIR}/../prx_external/lib
	     doc "PNG library")
find_path(PNGINCLUDE lodepng.hpp
	  paths ${CMAKE_SOURCE_DIR}/../prx_external/PNGCreator
	  doc "PNG include directory")
if(PNGLIB AND PNGINCLUDE)
    message("-- Found PNG library and header files")
    include_directories(${PNGINCLUDE})
    SET(PNG_FOUND 1)
else(PNGLIB AND PNGINCLUDE)
    message(WARNING "Could not find PNG library and header files")
endif(PNGLIB AND PNGINCLUDE)

find_path(TEST_ASSIMP assimp.h
	  paths /usr/local/include/assimp /opt/local/include/assimp /usr/include/assimp
	  doc "ASSIMP include directory")
if(TEST_ASSIMP)
  add_definitions("-DOLD_ASSIMP")
endif(TEST_ASSIMP)

##
## Adding subdirectories
##
include_directories(${PROJECT_SOURCE_DIR})
file(GLOB_RECURSE SRC_UTILITIES ${PROJECT_SOURCE_DIR}/prx/utilities/*.cpp)


### PACKAGES
### END PACKAGES


find_package(OCTAVE)
if(OCTAVE_FOUND)
    rosbuild_add_library(${PROJECT_NAME} ${SRC_UTILITIES} ${SRC_OCTAVE})
else()
    rosbuild_add_library(${PROJECT_NAME} ${SRC_UTILITIES})
endif(OCTAVE_FOUND)


find_package(RBDL)
if(RBDL_FOUND)
        add_definitions(-DRBDL_FOUND)
    include_directories(${RBDL_INCLUDE_DIR})
endif(RBDL_FOUND)

if(RBDL_URDFReader_FOUND)
    include_directories(${RBDL_URDFReader_INCLUDE_DIR})
endif(RBDL_URDFReader_FOUND)
find_package(Eigen REQUIRED)

include_directories(${EIGEN_INCLUDE_DIRS})

add_definitions(${EIGEN_DEFINITIONS})

find_library(BLITZLIB blitz
	     paths ${CMAKE_SOURCE_DIR}/../prx_external/lib
	     doc "blitz library")
set( BLITZINCLUDE "${CMAKE_SOURCE_DIR}/../prx_external/include")
if(BLITZLIB AND BLITZINCLUDE)
    message("-- Found Blitz library and header files")
    include_directories(${BLITZINCLUDE})
	set( EMD_DIR "${CMAKE_SOURCE_DIR}/../prx_external/Wavelet_Release" )
	include_directories( ${EMD_DIR} )
	find_library(EMDLIB PRXEMD
	     paths ${CMAKE_SOURCE_DIR}/../prx_external/lib
	     doc "emd library")
	target_link_libraries(${PROJECT_NAME} ${BLITZLIB} ${EMDLIB})
else(BLITZLIB AND BLITZINCLUDE)
    message(WARNING "Could not find Blitz library and header files")
endif(BLITZLIB AND BLITZINCLUDE)
 
##
## Linking external dependencies
##
target_link_libraries( ${PROJECT_NAME} ${ANNLIB} ${PNGLIB} assimp)
target_link_libraries(${PROJECT_NAME} ${LIBXML2_LIBRARIES})
rosbuild_link_boost(${PROJECT_NAME} filesystem system program_options )

if(OCTAVE_FOUND)
	message(STATUS "Octave Found")
	include_directories(${OCTAVE_INCLUDE_DIR})
        add_definitions(-DOCTAVE_FOUND)
	message(STATUS ${OCTAVE_LIBRARY})
	target_link_libraries(${PROJECT_NAME} ${OCTAVE_LIBRARY} ${OCTAVE_INT_LIBRARY} ${OCTAVE_CRUFT_LIBRARY})
else()
	message(STATUS "Octave not found")
endif(OCTAVE_FOUND)
if(RBDL_FOUND)
    target_link_libraries(${PROJECT_NAME} ${RBDL_LIBRARY} ${RBDL_URDFReader_LIBRARY})
endif(RBDL_FOUND)

#find_package(OpenCV)
#include_directories(${OpenCV_INCLUDE_DIRS})
#message(STATUS "${OpenCV_INCLUDE_DIRS}")
#target_link_libraries(${PROJECT_NAME} ${OpenCV_LIBRARIES})



# Define using STL flag for TinyXML
add_definitions(-DTIXML_USE_STL)

