cmake_minimum_required(VERSION 2.6.3)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
set(ROS_BUILD_TYPE Debug)
set(CMAKE_CXX_FLAGS "-Wall")
set(COMPILE_FCL 0)

message(${PROJECT_SOURCE_DIR})
set(CMAKE_MODULE_PATH  ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}/cmake_modules")

rosbuild_init()

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

rosbuild_genmsg()
rosbuild_gensrv()

#
# Locating PQP
#
find_library(PQPLIB PQP
	     paths /usr/local/lib /opt/local/lib ../prx_external/lib
	     doc "PQP library")
find_path(PQPINCLUDE PQP.h
	  paths /usr/local/include/pqp /opt/local/include/PQP ../prx_external/PQP
	  doc "PQP include directory")
if(PQPLIB AND PQPINCLUDE)
    message("-- Found PQP library and header files")
    include_directories(${PQPINCLUDE})
    SET(PQP_FOUND 1)
else(PQPLIB AND PQPINCLUDE)
    message(WARNING "Could not find PQP library and header files")
endif(PQPLIB AND PQPINCLUDE)


#
# Locating FCL
#
if(COMPILE_FCL)
find_library(FCLLIB FCL
	     paths /usr/local/lib /opt/local/lib
	     doc "FCL library")
find_path(FCLINCLUDE fcl/collision.h
	  paths /usr/local/include/fcl /opt/local/include/fcl
	  doc "fcl include directory")
if(FCLLIB AND FCLINCLUDE)
    message("-- Found FCL library and header files")
    include_directories(${FCLINCLUDE})
    SET(FCL_FOUND 1)
    add_definitions("-DFCL_FOUND")
    find_package(octomap REQUIRED)
    include_directories(${OCTOMAP_INCLUDE_DIRS})
    link_libraries(${OCTOMAP_LIBRARIES})
else(FCLLIB AND FCLINCLUDE)
    message(WARNING "Could not find FCL library and header files")
endif(FCLLIB AND FCLINCLUDE)
endif(COMPILE_FCL)

#
# Locating LAPACK
#
find_package( LAPACK REQUIRED )
#find_library(LAPACKLIB LAPACK
#	     paths /usr/local/lib /opt/local/lib
#	     doc "LAPACK library")
#find_path(LAPACKINCLUDE fcl/collision.h
#	  paths /usr/local/include/fcl /opt/local/include/fcl
#	  doc "fcl include directory")
if(LAPACK_FOUND)
    message("-- Found LAPACK library and header files at ${LAPACK_INCLUDE_DIR} and ${LAPACK_LIBRARIES_DIR}")
#    include_directories(${LAPACK_INCLUDE_DIR})
else(LAPACK_FOUND)
    message(WARNING "Could not find LAPACK library and header files")
endif(LAPACK_FOUND)

if(LAPACK_LIBRARIES_DIR)
    message("-- Found LAPACK DIRECTORY EXISTS")
#    include_directories(${LAPACK_INCLUDE_DIR})
else(LAPACK_LIBRARIES_DIR)
    message(WARNING "Could not find LAPACK library and header files ${LAPACK_LIBRARIES}")
endif(LAPACK_LIBRARIES_DIR)

#
# Locating Boost
#
rosbuild_add_boost_directories()

#
# ANN
#
find_library(ANNLIB ANN
	     paths ${CMAKE_SOURCE_DIR}/../prx_external/lib
	     doc "ANN library")
find_path(ANNINCLUDE ANN.h
	  paths ${CMAKE_SOURCE_DIR}/../prx_external/ANN
	  doc "ANN include directory")
if(ANNLIB AND ANNINCLUDE)
    message("-- Found ANN library and header files")
    include_directories(${ANNINCLUDE})
    SET(ANN_FOUND 1)
else(ANNLIB AND ANNINCLUDE)
    message(WARNING "Could not find ANN library and header files")
endif(ANNLIB AND ANNINCLUDE)

find_library(PNGLIB PRXPNG
	     paths ${CMAKE_SOURCE_DIR}/../prx_external/lib
	     doc "PNG library")
find_path(PNGINCLUDE lodepng.hpp
	  paths ${CMAKE_SOURCE_DIR}/../prx_external/PNGCreator
	  doc "PNG include directory")
if(PNGLIB AND PNGINCLUDE)
    message("-- Found PNG library and header files")
    include_directories(${PNGINCLUDE})
    SET(PNG_FOUND 1)
else(PNGLIB AND PNGINCLUDE)
    message(WARNING "Could not find PNG library and header files")
endif(PNGLIB AND PNGINCLUDE)

#
# OCTAVE
#
find_package(OCTAVE)
if(OCTAVE_FOUND)
        add_definitions(-DOCTAVE_FOUND)
	include_directories(${OCTAVE_INCLUDE_DIR})
endif(OCTAVE_FOUND)

#
# BULLET
#
find_package(Bullet)
if(BULLET_FOUND)
        add_definitions(-DBULLET_FOUND)
    include_directories(${BULLET_INCLUDE_DIR})
    message(STATUS "Bullet libs ${BULLET_LIBRARIES}")
endif(BULLET_FOUND)


find_package(RBDL)
if(RBDL_FOUND)
        add_definitions(-DRBDL_FOUND)
    include_directories(${RBDL_INCLUDE_DIR})
endif(RBDL_FOUND)

if(RBDL_URDFReader_FOUND)
    include_directories(${RBDL_URDFReader_INCLUDE_DIR})
endif(RBDL_URDFReader_FOUND)

find_package(Eigen REQUIRED)

include_directories(${EIGEN_INCLUDE_DIRS})

add_definitions(${EIGEN_DEFINITIONS})

## Adding subdirectories
##
include_directories(${PROJECT_SOURCE_DIR})
file(GLOB_RECURSE SRC_SIMULATION ${PROJECT_SOURCE_DIR}/prx/simulation/*.cpp)

### PACKAGES
### END PACKAGES

##
## Linking external dependencies
##

rosbuild_add_library(${PROJECT_NAME}_lib ${SRC_SIMULATION} )
target_link_libraries(${PROJECT_NAME}_lib ${PQPLIB} ${ANNLIB} ${PNGLIB} )
if(OCTAVE_FOUND)
	target_link_libraries(${PROJECT_NAME}_lib ${OCTAVE_LIBRARY} ${OCTAVE_INT_LIBRARY})
endif(OCTAVE_FOUND)

if(BULLET_FOUND)
    target_link_libraries(${PROJECT_NAME}_lib ${BULLET_LIBRARIES} BulletSoftBody)
endif(BULLET_FOUND)

if(RBDL_FOUND)
    target_link_libraries(${PROJECT_NAME}_lib ${RBDL_LIBRARY} ${RBDL_URDFReader_LIBRARY})
endif(RBDL_FOUND)

if(FCL_FOUND)
	target_link_libraries(${PROJECT_NAME}_lib ${FCLLIB})
endif(FCL_FOUND)

if(LAPACK_FOUND)
	target_link_libraries(${PROJECT_NAME}_lib ${LAPACK_LIBRARIES})
endif(LAPACK_FOUND)

if(DEFINED ENV{NTRT_PATH})
include_directories($ENV{NTRT_PATH}/src)
file(GLOB_RECURSE NTRT_LIB $ENV{NTRT_PATH}/build/*.so)
target_link_libraries(${PROJECT_NAME}_lib ${NTRT_LIB})
endif()

rosbuild_link_boost(${PROJECT_NAME}_lib filesystem system program_options )

# Define using STL flag for TinyXML
add_definitions(-DTIXML_USE_STL)

##
## ROS tests
##
#file(GLOB SRC_ROS_UNITTEST ${PROJECT_SOURCE_DIR}/test/*.cpp)
#rosbuild_add_gtest(unittests ${SRC_ROS_UNITTEST} )
#target_link_libraries(unittests ${PROJECT_NAME}_lib)

################
## Executable ##
################
file(GLOB_RECURSE SRC_APPLICATION ${PROJECT_SOURCE_DIR}/prx/simulation/applications/*.cpp)
rosbuild_add_executable(${PROJECT_NAME} ${PROJECT_SOURCE_DIR}/prx/main.cpp)
target_link_libraries(${PROJECT_NAME} ${PROJECT_NAME}_lib)
